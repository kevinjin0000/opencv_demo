#encoding=utf-8
import cv2,pathlib

#读取图像文件

#image_path = r'H:\py_code\opencv_fol\bees_fol\bees12C.jpg'
image_path = r'H:\py_code\opencv_fol\bees_fol\chun_bees1C.jpg'
#image_path = r'H:\py_code\opencv_fol\data\images_fol\yellow22.jpg'
image = cv2.imread(image_path)

# 检查图像是否成功读取
if image is None:
    print("错误：无法加载图像，请检查路径是否正确。")
    exit()


#访问对应坐标的像素值
pixel_value = image[10, 15] #获取（第10行、第15列）该坐标处的像素值
print('pixel_value', pixel_value )

# 获取图像的尺寸
height, width = image.shape[:2]

# 打印图像的高度和宽度
print(f"图像的长（高度）为 {height} 像素")
print(f"图像的宽（宽度）为 {width} 像素")


#修改像素值
image[10, 15] = [255, 0, 0]


#访问对应坐标的像素值
pixel_value = image[10, 15] #获取（第10行、第15列）该坐标处的像素值
print('pixel_value', pixel_value )

'''  
#提取ROI--图像中我们感兴趣的区域
#roi = image[0:10, 0:10]
roi = image[0:2, 0:3]

#图像ROI--图像中我们感兴趣的区域
roi[:, :] = [0, 100, 255]
'''

"""  
#图像通道分离
b, g, r = cv2.split(image)
print('b', b)
print('g', g)
print('r', r)

#图像通道合并
meraged_img = cv2.merge([b, g, r])
"""

#图像缩放
#resised_img = cv2.resize(image, (300, 300))

'''  

#图像旋转
(h, w)=image.shape[:2]
center = (w//2, h//2)
M = cv2.getRotationMatrix2D(center, 45, 1.0)
rotated_img = cv2.warpAffine(image, M, (w, h))
'''

#图像平移
#filapped_img = cv2.flip(image, 1)

filapped_img = cv2.flip(image, 0)


# 创建一个名为 "Display Image" 的窗口，并在其中显示图像
#cv2.imshow("Display Image", image)
cv2.imshow("Display Imag2e", filapped_img )


# 3. 等待用户按键
# 参数 0 表示无限等待，直到用户按下任意键
key = cv2.waitKey(0)

# 4. 根据用户按键执行操作
if key == ord('s'):  # 如果按下 's' 键
    # 保存图像
    output_path = "saved_image.jpg"
    cv2.imwrite(output_path, image)
    print(f"图像已保存为 {output_path}")
else:  # 如果按下其他键
    print("图像未保存。")

# 5. 关闭所有窗口
cv2.destroyAllWindows()
